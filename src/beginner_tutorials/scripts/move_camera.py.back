#!/usr/bin/env python
# Software License Agreement (BSD License)
#
# Copyright (c) 2008, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of Willow Garage, Inc. nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Revision $Id$

## Simple talker demo that listens to std_msgs/Strings published 
## to the 'chatter' topic

import rospy
from std_msgs.msg import String
import RPi.GPIO as GPIO
import time

class motor_move:

	global p
	global pos
	global servoPIN

	servoPIN = 12
	pos = 0

	def callback(direction):
		global p
		global pos
		temp = 0
		if direction == 'left':
			temp = pos + 0.2
		elif direction == 'right':
			temp = pos - 0.2

		if pos >= 0 and pos <= 14:
			pos = temp
			p.ChangeDutyCycle(pos)
			rospy.loginfo(rospy.get_caller_id() + ': direction=' + direction.data + ' Camera moved to position ' + str(pos))
	
	def __init__(self):

		global pos
		global p

		GPIO.setmode(GPIO.BOARD)
		GPIO.setup(servoPIN, GPIO.OUT)
		p = GPIO.PWM(servoPIN, 50)
		pos = 7.4
		p.start(pos) # Initialization
		time.sleep(0.03)

	def listener(args):
		rospy.init_node('move_camera_motor', anonymous=False)

		rospy.Subscriber('move_camera', String, self.callback)

		# spin() simply keeps python from exiting until this node is stopped
		rospy.spin()

if __name__ == '__main__':
	mt = motor_move()
	try:
		mt.listener()
	except rospy.ROSInterruptException:
		mt.p.stop
		GPIO.cleanup()

